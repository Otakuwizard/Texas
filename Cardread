# include <stdio.h>
# include <stdlib.h>

# define RANK_NUMBER 13
# define SUIT_NUMBER 4
# define HAND_CARDS 5
# define TRUE 1
# define FALSE 0

typedef int Bool;

int num_in_rank[RANK_NUMBER];
int num_in_suit[SUIT_NUMBER];
Bool straight, flush, four, three;
int pairs;

void read_cards(void);
void analyze_hand(void);
void print(void);

main(){
	for(;;){
		read_cards();
		analyze_hand();
		print();
	}
}

void read_cards(void){
	Bool cards_exists[SUIT_NUMBER][RANK_NUMBER];
	char ch, ch_rank, ch_suit;
	int suit, rank, cards_read = 0;
	Bool bad_card;
	
	for(suit = 0; suit < SUIT_NUMBER; suit++)
		num_in_suit[suit] = 0;
	for(rank = 0; rank < RANK_NUMBER; rank++)
		cards_exists[suit][rank] = FALSE;
		
	for(rank = 0; rank < RANK_NUMBER; rank++)
		num_in_rank[rank] = 0;
	
	while(cards_read < HAND_CARDS){
		bad_card = FALSE;
		printf("Please enter a card.");
		ch_rank = getchar();
		
		switch(ch_rank){
			case '0':
				exit(EXIT_SUCCESS);
			case '2':
				rank = 0;
				break;
			case '3':
				rank = 1;
				break;
			case '4':
				rank = 2;
				break;
			case '5':
				rank = 3;
				break;
			case '6':
				rank = 4;
				break;
			case '7':
				rank = 5;
				break;
			case '8':
				rank = 6;
				break;
			case '9':
				rank = 7;
				break;
			case 't':
			case 'T':
				rank = 8;
				break;
			case 'j':
			case 'J':
				rank = 9;
				break;
			case 'q':
			case 'Q':
				rank = 10;
				break;
			case 'k':
			case 'K':
				rank = 11;
				break;
			case 'a':
			case 'A':
				rank = 12;
				break;
			default:
				bad_card = TRUE;
				
		}
		
		ch_suit = getchar();
		
		switch(ch_suit){
			case 'c':
			case 'C':
				suit = 0;
				break;
			case 'd':
			case 'D':
				suit = 1;
				break;
			case 'h':
			case 'H':
				suit = 2;
				break;
			case 's':
			case 'S':
				suit = 3;
				break;
			default:
				bad_card = TRUE;
		}
		
		while((ch = getchar()) != '\n')
			if((ch = getchar()) != ' ')
				bad_card = TRUE;
				
		if(bad_card){
			printf("Bad card, ignored.\n");
		}else if(cards_exists[suit][rank]){
			printf("Duplicate card, ignored.\n");
		}else{
			num_in_rank[rank]++;
			num_in_suit[suit]++;
			cards_read++;
			cards_exists[suit][rank] = TRUE;
		}
	}
}

void analyze_hand(void){
	int rank, suit, num_consec = 0;
	
	straight = FALSE;
	flush = FALSE;
	four = FALSE;
	three = FALSE;
	pairs = 0;
	
	for(suit = 0; suit < SUIT_NUMBER; suit++)
		if(num_in_suit[suit] == HAND_CARDS)
			flush = TRUE;
			
	for(rank = 0; num_in_rank[rank] == 0; rank++);
	for(; rank < RANK_NUMBER && num_in_rank[rank] > 0; rank++)
		num_consec++;
	if(num_consec == HAND_CARDS){
		straight = TRUE;
		return;
	}
	
	for(rank = 0; rank < RANK_NUMBER; rank++){
		if(num_in_rank[rank] == 4)
			four = TRUE;
		if(num_in_rank[rank] == 3)
			three = TRUE;
		if(num_in_rank[rank] == 2)
			pairs++;
	}
}

void print(void){
	if(straight && flush)
		printf("Straight flush\n\n");
	if(four)
		printf("Four of a kind\n\n");
	if(three && pairs ==1)
		printf("Full house\n\n");
	if(flush)
		printf("Flush\n\n");
	if(straight)
		printf("Straight");
	if(three)
		printf("Three");
	if(pairs == 2)
		printf("Two Pairs\n\n");
	if(pairs == 1)
		printf("One Pair\n\n");
	else
		printf("High card\n\n");
}
